<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(DefaultNetCoreTargetFramework)</TargetFrameworks>
    <TargetFrameworks Condition="'$(OS)' == 'Windows_NT'">$(TargetFrameworks);$(DefaultNetFxTargetFramework)</TargetFrameworks>
    <DefaultItemExcludes>$(DefaultItemExcludes);**\TestFiles\**\*</DefaultItemExcludes>
    <DefineConstants Condition="'$(GenerateBaselines)'=='true'">$(DefineConstants);GENERATE_BASELINES</DefineConstants>
    <IsTestProject>true</IsTestProject>
    <PreserveCompilationContext>true</PreserveCompilationContext>
    <_IncludeAspNetCoreDlls Condition="'$(TargetFramework)' != '$(DefaultNetFxTargetFramework)'">true</_IncludeAspNetCoreDlls>
    <_ShimAliases Condition="'$(_IncludeAspNetCoreDlls)' == 'true'">shim</_ShimAliases>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Microsoft.CodeAnalysis.Razor.Compiler\Microsoft.CodeAnalysis.Razor.Compiler.csproj" />
    <ProjectReference Include="..\Microsoft.AspNetCore.Razor.Test.Common\Microsoft.AspNetCore.Razor.Test.Common.Compiler.csproj" />
    <ProjectReference Include="..\Microsoft.AspNetCore.Razor.Test.ComponentShim\Microsoft.AspNetCore.Razor.Test.ComponentShim.Compiler.csproj" Aliases="$(_ShimAliases)" />
    <ProjectReference Include="..\Microsoft.AspNetCore.Razor.Test.MvcShim\Microsoft.AspNetCore.Razor.Test.MvcShim.Compiler.csproj" Aliases="$(_ShimAliases)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Moq" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="**\TestFiles\**\*" />
    <None Include="xunit.runner.json" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <!-- Source generator tests were not written for .NET framework. -->
  <ItemGroup Condition="'$(TargetFramework)' == '$(DefaultNetFxTargetFramework)'">
    <Compile Remove="SourceGenerators\**\*.cs" />
  </ItemGroup>

  <!-- Some Microsoft.AspNetCore.Mvc.Razor.Extensions tests need MvcShim DLL. -->
  <Target Name="CopyDepsFromShims_Build" AfterTargets="Build">
    <ItemGroup>
      <MvcShim Condition="$(TargetFramework) != ''" Include="$(ArtifactsBinDir)\Microsoft.AspNetCore.Razor.Test.MvcShim.Compiler\$(Configuration)\$(TargetFramework)\Microsoft.AspNetCore.Razor.Test.MvcShim.Compiler.deps.json" />
    </ItemGroup>
    <Copy SourceFiles="@(MvcShim)" DestinationFolder="$(OutputPath)" />
  </Target>
  <Target Name="CopyDepsFromShims_Publish" AfterTargets="Publish">
    <ItemGroup>
      <MvcShim Condition="$(TargetFramework) != ''" Include="$(ArtifactsBinDir)\Microsoft.AspNetCore.Razor.Test.MvcShim.Compiler\$(Configuration)\$(TargetFramework)\Microsoft.AspNetCore.Razor.Test.MvcShim.Compiler.deps.json" />
    </ItemGroup>
    <Copy SourceFiles="@(MvcShim)" DestinationFolder="$(PublishDir)" Condition="Exists($(PublishDir))" />
  </Target>

  <!--
    Include ASP.NET Core DLLs.

    Even though we reference `win-x64` package, it doesn't matter, we don't use any native DLLs.
    It's just to work around the fact that ASP.NET Core DLLs are not normally published to NuGet.
    And we don't want to reference ASP.NET Core SDK as that would be tied to our target SDK version.
  -->
  <PropertyGroup>
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch Condition="'$(_IncludeAspNetCoreDlls)' == 'true'">None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
  </PropertyGroup>
  <ItemGroup Condition="'$(_IncludeAspNetCoreDlls)' == 'true'">
    <PackageReference Include="Microsoft.AspNetCore.App.Runtime.win-x64" ExcludeAssets="all" GeneratePathProperty="true" />
    <Reference Include="$(PkgMicrosoft_AspNetCore_App_Runtime_win-x64)\runtimes\win-x64\lib\net7.0\*.dll" />
  </ItemGroup>

</Project>
